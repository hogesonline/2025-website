title: Explore, annotate, and analyse multidimensional image data with napari
start: 2024-11-22 12:20:00+11:00
end: 2024-11-22 12:50:00+11:00
room: goldfields
track: scientific
abstract: '<p>napari is an n-dimensional image viewer for Python. If you’ve ever tried
  <code>plt.imshow(arr)</code> and made Matplotlib unhappy because <code>arr</code>
  has more than two dimensions, then napari might be for you! napari will gladly display
  higher-dimensional arrays by providing sliders to explore additional dimensions.
  But napari can also: overlay derived data, such as points, segmentations, polygons,
  surfaces, and more; and annotate and edit these data, using standard data structures
  like NumPy or Zarr arrays, allowing you to seamlessly weave exploration, computation,
  and annotation in image analysis.</p>'
description: "<p>napari is an n-dimensional image viewer for Python. If you’ve ever
  tried <code>plt.imshow(arr)</code> and made Matplotlib unhappy because <code>arr</code>
  has more than two dimensions, then napari might be for you!</p>\n<p>The napari canvas
  can be 2D or 3D. When you give napari an array with more dimensions than the canvas,
  it will automatically create sliders for those additional dimensions, allowing you
  to rapidly explore your full data, rather than a few sampled slices.</p>\n<p>Image
  analysis and visualisation involves more than images though: feature detection algorithms
  result in points, segmentation results in label images, annotation results in shapes
  such as rectangles or polygons, and more. Napari provides layers that can be displayed
  on top of each other or side by side, allowing users of Scientific Python to gain
  a rapid understanding of the algorithms they’re using — where they work well and
  where they might go wrong.</p>\n<p>Sometimes, image analysis algorithms get you
  this far, but not quite far enough. In such cases, it’s useful to manually curate
  their output, then continue with downstream steps of an analysis. Napari provides
  editing tools for its layer types, allowing one for example to add missing points
  to the output of a peak detection algorithm, remove incorrect ones, paint over incorrect
  parts of a segmentation, or draw polygons around missed objects of interest. The
  resulting data points are saved in standard Scientific Python data structures, such
  as NumPy or Zarr arrays.</p>\n<p>This design makes it easy to seamlessly weave together
  image exploration, image computation, processing, and analysis, and data annotation,
  curation, and editing.</p>\n<p>Napari provides a plugin interface, allowing developers
  to extend napari’s capabilities, providing users with novel ways to interact with
  their data. Because napari provides both a library accessible within Python, IPython,
  and Jupyter, and a standalone executable script, we have found that napari plugins
  can help collaborators run Python image analysis workflows without needing to launch
  Python.</p>\n<p>In this talk, we'll introduce napari’s history, (live) demonstrate
  the features described above, and discuss current limitations and where we’re going.</p>"
code: JV9WT7
speakers:
- 8NFJSF
- S7AU83
cw:
youtube_slug: EYmTLGwScBI
